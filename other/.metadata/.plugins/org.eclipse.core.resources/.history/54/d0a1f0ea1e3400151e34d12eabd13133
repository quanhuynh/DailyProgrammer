import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;

import javax.swing.*;

public class Conway extends JFrame {

	private static final long serialVersionUID = 1L;
	static JLabel[] myLabels;
	private static final int WIDTH = 50;
	private static final int HEIGHT = 30;
	private static final int interval = 250;
	
	public Conway() {
		super("Conway's Game of Life");
		setSize(WIDTH*11, HEIGHT*11);
		setResizable(false);
		setLayout(new GridLayout(HEIGHT, WIDTH));
		myLabels = new JLabel[WIDTH*HEIGHT];
		
		for (int i=0; i<myLabels.length; i++) {
			JLabel cell = new JLabel("");
			cell.setOpaque(true);
			myLabels[i] = cell;
			
			cell.setBackground(Color.white);
			int x = i % WIDTH;
			int y = i / WIDTH;
			cell.setName(x + " " + y + " " + "dead");
			cell.setBorder(BorderFactory.createLineBorder(Color.lightGray));
			cell.addMouseListener(new MouseAdapter() {
				public void mouseClicked(MouseEvent e) {
					JLabel clickedCell = (JLabel) e.getSource();
					if (isAlive(clickedCell)) {
						changeStatus(clickedCell, "dead");
						killCell(clickedCell);
					} else {
						changeStatus(clickedCell, "alive");
						reviveCell(clickedCell);
					}
			    }
			});
			add(cell);
		}
		
		ActionListener updater = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				for (JLabel cell : myLabels) {
					updateCell(cell);
				}
				updateBoard();
			}
		};
		new Timer(interval, updater).start();
		setVisible(true);
		
		InitialConditions.blinker(WIDTH/2, HEIGHT/2);
		//InitialConditions.block();
	}

	
	
	public void updateCell(JLabel cell) {
		int neighbors = countNeighbors(cell);
		if (isAlive(cell)) {
			//	neighbors < 2 || neighbors > 3: die
			// neighbors == 2 || neighbors == 3: do nothing
			if (neighbors < 2 || neighbors > 3) {
				changeStatus(cell, "dead");
			} else {}
		} else {
			// neighbors == 3: live
			// else: do nothing
			if (neighbors == 3) {
				changeStatus(cell, "alive");
			} else {}
		}
	}
	
	public void updateBoard() {
		for (int i=0; i<myLabels.length; i++) {
			JLabel curCell = myLabels[i];
			String status = getStatus(curCell);
			if (status.equals("alive")) {
				reviveCell(curCell);
			} else if (status.equals("dead")) {
				killCell(curCell);
			}
		}
	}
	
	public void killCell(JLabel cell) {
		cell.setBackground(Color.white);
	}
	
	public void reviveCell(JLabel cell) {
		cell.setBackground(Color.black);
	}
	
	public boolean isAlive(JLabel cell) {
		//Check for color, not status
		return cell.getBackground() == Color.black;
	}
	
	public int countNeighbors(JLabel cell) {
		int count = 0;
		int[] coords = getCoordinate(cell);
		int x = coords[0];
		int y = coords[1];
		int[] xRange = {-1, 1};
		int[] yRange = {-1, 1};
		if (x == 0) {
			xRange[0] = 0;
		} else if (x == WIDTH-1) {
			xRange[1] = 0;
		}
		if (y == 0) {
			yRange[0] = 0;
		} else if (y == HEIGHT-1) {
			yRange[1] = 0;
		}
		for (int i=xRange[0]; i<xRange[1]+1; i++) {
			for (int j=yRange[0]; j<yRange[1]+1; j++) {
				if (i == 0 && j == 0) {
					continue;
				} else {
					JLabel neighborCell = myLabels[getIndex(x+i, y+j)];
					if (isAlive(neighborCell)) {
						count++;
					}
				}
			}
		}
		return count;
	}
	
	public String getStatus(JLabel cell) {
		return cell.getName().split(" ")[2];
	}
	
	public static void changeStatus(JLabel cell, String status) {
		int[]  coords = getCoordinate(cell);
		int x = coords[0];
		int y = coords[1];
		cell.setName(x + " " + y + " " + status);
	}
	
	public static int[] getCoordinate(JLabel cell) {
		int[] coordinate = new int[2];
		String[] name = cell.getName().split(" ");
		coordinate[0] = Integer.parseInt(name[0]);
		coordinate[1] = Integer.parseInt(name[1]);
		return coordinate;
	}
	
	public static int getIndex(int x, int y) {
		return x + y*WIDTH;
	}
	
	public static void main(String[] args) {
		new Conway();
	}
	
	private static class InitialConditions {
		static int midX = WIDTH/2;
		static int midY = HEIGHT/2;
		
		public static void blinker(int x, int y) { 
			for (int i=-1; i<=1; i++) {
				changeStatus(myLabels[getIndex(x+i, y)], "alive");
			}
		}
		public static void block(int x, int y) {
			for (int i=-1; i<=0; i++) {
				for (int j=-1; j<=0; j++) {
					changeStatus(myLabels[getIndex(x+i, y+j)], "alive");
				}
			}
		}
	}

}
